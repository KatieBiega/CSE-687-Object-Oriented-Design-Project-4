#define _CRT_SECURE_NO_WARNINGS
#define WIN32_LEAN_AND_MEAN


#include <iostream>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>

#include "../MapDLL/MapInterface.h"
#include "../ReduceDLL/ReduceInterface.h"
#include "File Management.h"


#include <Windows.h>
#include <WinSock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>

#pragma comment(lib, "ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")


using std::stringstream;
using std::vector;
using std::string;
using std::wstring;
using std::to_string;
using std::getline;
using std::cout;
using std::cin;
using std::endl;
using std::mbstowcs;




typedef MapInterface* (*CREATE_MAPPER) ();
typedef ReduceInterface* (*CREATE_REDUCER) ();



void SendMessage(SOCKET socket, const string& message) {
    send(socket, message.c_str(), message.size(), 0);
}

string ReceiveMessage(SOCKET socket) {
    const int bufferSize = 1024;
    char buffer[bufferSize];
    memset(buffer, 0, bufferSize);
    recv(socket, buffer, bufferSize - 1, 0);
    return string(buffer);
}


int main(int argc, char* argv[]) {

    cout << "Program started. step 1...\n";

    STARTUPINFO sim;
    PROCESS_INFORMATION pim;

    STARTUPINFO sir;
    PROCESS_INFORMATION pir;

    STARTUPINFO sif;
    PROCESS_INFORMATION pif;

    ZeroMemory(&sim, sizeof(sim));
    sim.cb = sizeof(sim);
    ZeroMemory(&pim, sizeof(pim));

    ZeroMemory(&sir, sizeof(sir));
    sir.cb = sizeof(sir);
    ZeroMemory(&pir, sizeof(pir));

    ZeroMemory(&sif, sizeof(sif));
    sif.cb = sizeof(sif);
    ZeroMemory(&pif, sizeof(pif));


    string functionSelector;
    string sourceName;
    string destinationName;

    cout << "Number of arguments: " << argc << "\n";

    if (argc > 1) {
        for (int i = 0; i < (argc - 2); i++) {
            cout << "Argument " << i << ": " << argv[i] << "\n";

        }
        functionSelector = argv[1]; // this becomes argv[1] when uesd as a parameter in a child process;
        sourceName = argv[2];
        destinationName = argv[3];
    }




    cout << "Program started. step 2...\n";
    //system("pause");




    int R = 0; // this is the total number of processes, which should equal the number of files in the inputDirectory folder

    string fileName = "";  // Temporary
    string fileString = "";  // Temporary
    string inputDirectory = "";  // Temporary
    string outputDirectory = "";  // Temporary
    string tempDirectory = "";  // Temporary

    //string sourceName = "";  // Temporary
    //string destinationName = "";  // Temporary



    wchar_t* wtemp = (wchar_t*)malloc(10);
    size_t commandLength = 0;

    string mapped_string;
    string inputFilename = "";
    string tempFilename = "TempFile.txt";
    string tempFileContent;
    string reduced_string;
    string outputFilename = "Final_OutputFile.txt";
    string successString = "";
    string successFilename = "SUCCESS.txt";

    string executableName = argv[0];

    string commandLineArguments = "needexehere needfunctionselectionhere needsourcefilepathhere needdestinationfilepathhere";


    cout << "Program started. step 3...\n";

    HMODULE mapDLL = LoadLibraryA("MapDLL.dll"); // load dll for map functions
    if (mapDLL == NULL) // exit main function if mapDLL is not found
    {
        cout << "Failed to load mapDLL." << endl;
        return 1;
    }

    HMODULE reduceDLL = LoadLibraryA("ReduceDLL.dll"); // load dll for library functions
    if (reduceDLL == NULL) // exit main function if reduceDLL is not found
    {
        cout << "Failed to load reduceDLL." << endl;
        return 1;
    }

    cout << "Program started. step 4...\n";

    if (functionSelector == "map") {
        inputDirectory = "";
        outputDirectory = "NULL";
        tempDirectory = "";
    }
    else if (functionSelector == "reduce") {
        inputDirectory = "NULL";
        outputDirectory = "";
        tempDirectory = "";
    }
    else if (functionSelector == "finalreduce") {
        outputDirectory = argv[2];
    }
    else {

        cout << "==== MAP & REDUCE ====\n\n"; // add title

        inputDirectory = "../../io_files/input_directory";
        outputDirectory = "../../io_files/output_directory";
        tempDirectory = "../../io_files/temp_directory";

        /*
        cout << "Enter the input directory: "; // prompt user to input i/o directories
        cin >> inputDirectory;
        cout << "Enter the output directory: ";
        cin >> outputDirectory;
        cout << "Enter the temp directory: ";
        cin >> tempDirectory;
        */

    }



    //WORKFLOW//

    FileManagement FileManage(inputDirectory, outputDirectory, tempDirectory); //Create file management class based on the user inputs
    cout << "FileManagement Class initialized.\n";



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Communication with the stub process
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "Failed to initialize Winsock." << endl;
        return 1;
    }

    SOCKET stubSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (stubSocket == INVALID_SOCKET) {
        cout << "Failed to create socket." << endl;
        WSACleanup();
        return 1;
    }

    sockaddr_in stubAddr;
    stubAddr.sin_family = AF_INET;
    stubAddr.sin_port = htons(12345);
    stubAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    if (connect(stubSocket, (struct sockaddr*)&stubAddr, sizeof(stubAddr)) == SOCKET_ERROR) {
        cout << "Failed to connect to stub server." << endl;
        closesocket(stubSocket);
        WSACleanup();
        return 1;
    }

    string stubMessage = "Create child processes";
    SendMessage(stubSocket, stubMessage);

    // Wait for the stub to respond or handle the response accordingly
    string stubResponse = ReceiveMessage(stubSocket);
    cout << "Stub response: " << stubResponse << endl;

    closesocket(stubSocket);
    WSACleanup();

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    int mapServerSocket = socket(AF_INET, SOCK_STREAM, 0);
    int reduceServerSocket = socket(AF_INET, SOCK_STREAM, 0);

    sockaddr_in mapServerAddr, reduceServerAddr;

    WSADATA wsaDataMapReduce;
    if (WSAStartup(MAKEWORD(2, 2), &wsaDataMapReduce) != 0) {
        cout << "Failed to initialize Winsock for MapReduce." << endl;
        return 1;
    }

    mapServerSocket = socket(AF_INET, SOCK_STREAM, 0);
    reduceServerSocket = socket(AF_INET, SOCK_STREAM, 0);

    mapServerAddr.sin_family = AF_INET;
    mapServerAddr.sin_port = htons(11112);  // Example port for map server
    mapServerAddr.sin_addr.s_addr = INADDR_ANY;

    reduceServerAddr.sin_family = AF_INET;
    reduceServerAddr.sin_port = htons(11111);  // Example port for reduce server
    reduceServerAddr.sin_addr.s_addr = INADDR_ANY;

    // Bind and listen for map server socket
    if (bind(mapServerSocket, (struct sockaddr*)&mapServerAddr, sizeof(mapServerAddr)) == SOCKET_ERROR) {
        cout << "Failed to bind map server socket." << endl;
        closesocket(mapServerSocket);
        WSACleanup();
        return 1;
    }

    if (listen(mapServerSocket, SOMAXCONN) == SOCKET_ERROR) {
        cout << "Listen failed on map server socket." << endl;
        closesocket(mapServerSocket);
        WSACleanup();
        return 1;
    }

    // Bind and listen for reduce server socket
    if (bind(reduceServerSocket, (struct sockaddr*)&reduceServerAddr, sizeof(reduceServerAddr)) == SOCKET_ERROR) {
        cout << "Failed to bind reduce server socket." << endl;
        closesocket(reduceServerSocket);
        WSACleanup();
        return 1;
    }

    if (listen(reduceServerSocket, SOMAXCONN) == SOCKET_ERROR) {
        cout << "Listen failed on reduce server socket." << endl;
        closesocket(reduceServerSocket);
        WSACleanup();
        return 1;
    }


    // Accept connections
    SOCKET mapClientSocket = accept(mapServerSocket, nullptr, nullptr);
    SOCKET reduceClientSocket = accept(reduceServerSocket, nullptr, nullptr);

    if (mapClientSocket == INVALID_SOCKET || reduceClientSocket == INVALID_SOCKET) {
        cout << "Failed to accept connection." << endl;
        closesocket(mapServerSocket);
        closesocket(reduceServerSocket);
        WSACleanup();
        return 1;
    }

    closesocket(mapServerSocket);
    closesocket(reduceServerSocket);

    string controllerData = "Data from controller to map process";
    SendMessage(mapClientSocket, controllerData);

    string mapData = ReceiveMessage(mapClientSocket);
    cout << "Received data in controller from map process: " << mapData << endl;

    controllerData = "Data from controller to reduce process";
    SendMessage(reduceClientSocket, controllerData);

    string reduceData = ReceiveMessage(reduceClientSocket);
    cout << "Received data in controller from reduce process: " << reduceData << endl;

    closesocket(mapClientSocket);
    closesocket(reduceClientSocket);
    WSACleanup();


    cout << "All communication complete.\n";

    //all reducer child processes should be done at this point.



    //fileString = FileManage.ReadAllFiles();     //Read all file into single string
    //cout << "All files read.\n";

    FileManage.WriteToOutputFile(successFilename, successString);
    cout << "Success.\n";
    system("pause");


    FreeLibrary(mapDLL);
    FreeLibrary(reduceDLL);

    return 0;
}
